import { NextResponse } from 'next/server'
import { 
  extractTextFromPDF, 
  isValidPDF, 
  extractMetadata, 
  splitTextIntoChunks,
  analyzeTextStructure 
} from '../../../../lib/pdf/pdfReader.js'
import { analyzeDocument, analyzeDocumentInChunks } from '../../../../lib/ai/documentAnalyzer.js'
import { validateAnalysisParams, formatErrorResponse, formatSuccessResponse, calculateTextStats } from '../../../../lib/utils/validation.js'

export const config = {
  api: {
    bodyParser: false, // Importante para upload de arquivos
  },
}

export async function POST(request) {
  console.log('üöÄ === INICIANDO AN√ÅLISE DE PDF ===')
  
  try {
    // Parse do FormData
    const formData = await request.formData()
    const file = formData.get('pdf')
    const analysisType = formData.get('analysisType') || 'comprehensive'
    
    console.log('üìÑ Arquivo recebido:', {
      name: file?.name,
      size: file?.size,
      type: file?.type
    })
    console.log('üéØ Tipo de an√°lise solicitado:', analysisType)
    
    // === VALIDA√á√ïES INICIAIS ===
    if (!file) {
      console.log('‚ùå Nenhum arquivo enviado')
      return NextResponse.json(
        formatErrorResponse('Nenhum arquivo PDF foi enviado', 400),
        { status: 400 }
      )
    }
    
    // Valida√ß√£o do tipo de an√°lise
    const analysisValidation = validateAnalysisParams(analysisType)
    if (!analysisValidation.isValid) {
      console.log('‚ùå Tipo de an√°lise inv√°lido:', analysisValidation.error)
      return NextResponse.json(
        formatErrorResponse(analysisValidation.error, 400),
        { status: 400 }
      )
    }
    
    // === PROCESSAMENTO DO ARQUIVO ===
    console.log('‚è≥ Convertendo arquivo para buffer...')
    const arrayBuffer = await file.arrayBuffer()
    const buffer = Buffer.from(arrayBuffer)
    console.log(`‚úÖ Buffer criado: ${buffer.length} bytes`)
    
    // Valida√ß√£o do PDF
    if (!isValidPDF(buffer)) {
      console.log('‚ùå Arquivo n√£o √© um PDF v√°lido')
      return NextResponse.json(
        formatErrorResponse('Arquivo n√£o √© um PDF v√°lido ou est√° corrompido', 400),
        { status: 400 }
      )
    }
    console.log('‚úÖ PDF v√°lido confirmado')
    
    // === EXTRA√á√ÉO DE TEXTO ===
    let pdfData
    try {
      console.log('‚è≥ Extraindo texto do PDF...')
      pdfData = await extractTextFromPDF(buffer)
      console.log('‚úÖ Extra√ß√£o conclu√≠da:', {
        paginas: pdfData.numPages,
        palavras: pdfData.wordCount,
        caracteres: pdfData.charCount,
        temConteudo: pdfData.hasEnoughContent
      })
    } catch (error) {
      console.error('‚ùå Erro na extra√ß√£o do PDF:', {
        message: error.message,
        stack: error.stack
      })
      
      // Mensagens mais espec√≠ficas baseadas no tipo de erro
      let errorMessage = 'Falha ao extrair texto do PDF.'
      if (error.message.includes('corrompido')) {
        errorMessage += ' O arquivo parece estar corrompido.'
      } else if (error.message.includes('senha')) {
        errorMessage += ' O arquivo est√° protegido por senha.'
      } else if (error.message.includes('biblioteca')) {
        errorMessage += ' Erro interno do sistema de leitura.'
      } else {
        errorMessage += ` Detalhes: ${error.message}`
      }
      
      return NextResponse.json(
        formatErrorResponse(errorMessage, 422),
        { status: 422 }
      )
    }
    
    // Verifica se h√° conte√∫do suficiente
    if (!pdfData.hasEnoughContent) {
      console.log('‚ùå PDF sem conte√∫do suficiente:', {
        isEmpty: pdfData.isEmpty,
        textLength: pdfData.cleanText.length
      })
      
      const errorMessage = pdfData.isEmpty 
        ? 'PDF n√£o cont√©m texto leg√≠vel. Pode ser composto apenas por imagens.'
        : 'PDF cont√©m muito pouco texto para an√°lise. Verifique o conte√∫do.'
      
      return NextResponse.json(
        formatErrorResponse(errorMessage, 422),
        { status: 422 }
      )
    }
    
    // === AN√ÅLISE DA ESTRUTURA ===
    const textStructure = analyzeTextStructure(pdfData.cleanText)
    console.log('üîç Estrutura do texto analisada:', textStructure.type)
    
    // === EXTRA√á√ÉO DE METADADOS ===
    const metadata = extractMetadata(pdfData)
    console.log('üìä Metadados extra√≠dos:', {
      titulo: metadata.title,
      autor: metadata.author,
      paginas: metadata.pages
    })
    
    // === C√ÅLCULO DE ESTAT√çSTICAS ===
    const textStats = calculateTextStats(pdfData.cleanText)
    console.log('üìà Estat√≠sticas calculadas:', {
      palavras: textStats.words,
      tempoLeitura: textStats.readingTimeMinutes
    })
    
    // === AN√ÅLISE COM IA ===
    console.log('üß† Iniciando an√°lise com IA...')
    
    // Decide se deve analisar em chunks baseado no tamanho
    const maxTokens = 6000 // Limite conservador para o modelo
    const shouldUseChunks = pdfData.cleanText.length > maxTokens
    
    let analysis
    
    // Adiciona informa√ß√µes da estrutura do texto para a IA
    const enhancedMetadata = {
      ...metadata,
      textStructure,
      analysisContext: {
        isExamRelated: textStructure.type.includes('exam') || textStructure.type.includes('answer'),
        hasGabarito: textStructure.hasGabarito,
        hasStudentNames: textStructure.hasStudentNames,
        confidence: textStructure.confidence
      }
    }
    
    try {
      if (shouldUseChunks) {
        console.log('üìÑ Documento grande - analisando em chunks...')
        const chunks = splitTextIntoChunks(pdfData.cleanText, maxTokens)
        console.log(`Dividido em ${chunks.length} chunks`)
        
        analysis = await analyzeDocumentInChunks(chunks, enhancedMetadata, analysisType)
      } else {
        console.log('üìÑ Documento pequeno - an√°lise direta...')
        analysis = await analyzeDocument(pdfData.cleanText, enhancedMetadata, analysisType)
      }
      
      console.log('‚úÖ An√°lise com IA conclu√≠da com sucesso')
    } catch (aiError) {
      console.error('‚ùå Erro na an√°lise com IA:', aiError)
      
      // Tratamento espec√≠fico de erros da IA
      let errorMessage = 'Erro na an√°lise do documento.'
      if (aiError.message.includes('rate limit') || aiError.message.includes('quota')) {
        errorMessage = 'Limite de uso da IA atingido. Tente novamente em alguns minutos.'
        return NextResponse.json(
          formatErrorResponse(errorMessage, 429),
          { status: 429 }
        )
      } else if (aiError.message.includes('timeout')) {
        errorMessage = 'An√°lise demorou muito para ser conclu√≠da. Tente com um arquivo menor.'
        return NextResponse.json(
          formatErrorResponse(errorMessage, 408),
          { status: 408 }
        )
      } else {
        errorMessage += ` Detalhes: ${aiError.message}`
        return NextResponse.json(
          formatErrorResponse(errorMessage, 503),
          { status: 503 }
        )
      }
    }
    
    // === PREPARA√á√ÉO DA RESPOSTA ===
    const responseData = {
      fileInfo: {
        name: file.name,
        size: file.size,
        type: file.type,
        pages: pdfData.numPages
      },
      textStats,
      metadata: enhancedMetadata,
      analysis: analysis.analysis,
      analysisType: analysis.analysisType,
      timestamp: analysis.timestamp,
      processingInfo: {
        chunksUsed: shouldUseChunks,
        chunksCount: shouldUseChunks ? analysis.chunksAnalyzed : 1,
        textExtracted: pdfData.wordCount > 0,
        structureAnalyzed: textStructure.type,
        confidence: textStructure.confidence
      }
    }
    
    console.log('üéâ An√°lise conclu√≠da com sucesso!')
    return NextResponse.json(
      formatSuccessResponse(responseData, 'PDF analisado com sucesso'),
      { status: 200 }
    )
    
  } catch (error) {
    console.error('üí• Erro geral na an√°lise:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    })
    
    // Tratamento espec√≠fico de erros gerais
    let errorMessage = 'Erro interno do servidor.'
    let statusCode = 500
    
    if (error.message.includes('FormData') || error.message.includes('multipart')) {
      errorMessage = 'Erro no processamento do arquivo enviado. Verifique o formato.'
      statusCode = 400
    } else if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {
      errorMessage = 'Opera√ß√£o expirou. Tente novamente com um arquivo menor.'
      statusCode = 408
    } else if (error.message.includes('Memory') || error.message.includes('heap')) {
      errorMessage = 'Arquivo muito grande para processamento. Reduza o tamanho e tente novamente.'
      statusCode = 413
    }
    
    return NextResponse.json(
      formatErrorResponse(errorMessage, statusCode),
      { status: statusCode }
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'API de an√°lise de PDF - Vers√£o Melhorada',
    endpoints: {
      POST: '/api/pdf/analyze - Envia PDF para an√°lise'
    },
    supportedFormats: ['application/pdf'],
    maxFileSize: '50MB',
    analysisTypes: [
      'comprehensive - An√°lise completa e detalhada',
      'summary - Resumo conciso',
      'academic - An√°lise acad√™mica',
      'business - An√°lise empresarial',
      'educational - An√°lise educacional',
      'exam_correction - Corre√ß√£o autom√°tica de provas'
    ],
    features: [
      'Extra√ß√£o robusta de texto',
      'An√°lise da estrutura do documento',
      'Identifica√ß√£o autom√°tica de gabaritos e provas',
      'Tratamento melhorado de erros',
      'Logs detalhados para debugging'
    ]
  })
}
