/**
 * Servi√ßo de an√°lise de documentos usando Azure OpenAI
 */

/**
 * Gera an√°lise completa de um documento
 * @param {string} text - Texto do documento
 * @param {Object} metadata - Metadados do documento
 * @param {string} analysisType - Tipo de an√°lise desejada
 * @returns {Promise<Object>} Relat√≥rio de an√°lise
 */
export async function analyzeDocument(text, metadata, analysisType = 'comprehensive') {
  try {
    console.log(`Iniciando an√°lise ${analysisType} do documento...`)
    
    // Configura√ß√µes do Azure OpenAI
    const apiKey = process.env.AZURE_OPENAI_API_KEY
    const endpoint = process.env.AZURE_OPENAI_ENDPOINT
    const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'o4-mini'
    const apiVersion = process.env.AZURE_OPENAI_API_VERSION || '2024-12-01-preview'
    
    if (!apiKey || !endpoint) {
      throw new Error('Configura√ß√µes do Azure OpenAI n√£o encontradas')
    }

    const analysisPrompt = generateAnalysisPrompt(text, metadata, analysisType)
    
    const azureUrl = `${endpoint}openai/deployments/${deploymentName}/chat/completions?api-version=${apiVersion}`
    
    const requestBody = {
      messages: [
        {
          role: "system",
          content: getSystemPrompt(analysisType)
        },
        {
          role: "user",
          content: analysisPrompt
        }
      ],
      model: deploymentName,
      max_completion_tokens: 8000,
      temperature: 1
    }

    const response = await fetch(azureUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'api-key': apiKey
      },
      body: JSON.stringify(requestBody)
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Erro na API Azure OpenAI: ${response.status} - ${errorText}`)
    }

    const data = await response.json()
    
    if (!data.choices || data.choices.length === 0) {
      throw new Error('Resposta inv√°lida da API')
    }

    const analysis = data.choices[0]?.message?.content
    
    if (!analysis) {
      throw new Error('An√°lise n√£o foi gerada')
    }

    console.log('An√°lise conclu√≠da com sucesso')
    
    return {
      analysis,
      metadata,
      analysisType,
      timestamp: new Date().toISOString(),
      wordCount: text.split(/\s+/).length,
      charCount: text.length
    }

  } catch (error) {
    console.error('Erro na an√°lise do documento:', error)
    throw new Error(`Falha na an√°lise: ${error.message}`)
  }
}

/**
 * Gera o prompt de an√°lise baseado no tipo solicitado
 * @param {string} text - Texto do documento
 * @param {Object} metadata - Metadados do documento
 * @param {string} analysisType - Tipo de an√°lise
 * @returns {string} Prompt formatado
 */
function generateAnalysisPrompt(text, metadata, analysisType) {
  const baseInfo = `
**METADADOS DO DOCUMENTO:**
- T√≠tulo: ${metadata.title}
- Autor: ${metadata.author}
- P√°ginas: ${metadata.pages}
- Palavras: aproximadamente ${text.split(/\s+/).length}

**TEXTO DO DOCUMENTO:**
${text}

---
`

  switch (analysisType) {
    case 'comprehensive':
      return baseInfo + `
Por favor, fa√ßa uma an√°lise COMPLETA e DETALHADA deste documento. Inclua:

1. **RESUMO EXECUTIVO** (2-3 par√°grafos)
2. **TEMAS PRINCIPAIS** (liste e explique os 5-7 temas mais importantes)
3. **ESTRUTURA E ORGANIZA√á√ÉO** (como o documento est√° organizado)
4. **PONTOS-CHAVE** (insights, conclus√µes, recomenda√ß√µes importantes)
5. **QUALIDADE E CONSIST√äNCIA** (avalia√ß√£o cr√≠tica do conte√∫do)
6. **P√öBLICO-ALVO** (para quem este documento foi escrito)
7. **RECOMENDA√á√ïES** (sugest√µes de melhorias ou pr√≥ximos passos)

Seja detalhado, objetivo e forne√ßa insights valiosos.`

    case 'summary':
      return baseInfo + `
Fa√ßa um RESUMO CONCISO mas COMPLETO deste documento. Inclua:
- Os pontos principais
- Conclus√µes importantes
- Recomenda√ß√µes ou pr√≥ximos passos
- Contexto relevante

O resumo deve ter entre 300-500 palavras e capturar a ess√™ncia do documento.`

    case 'academic':
      return baseInfo + `
Fa√ßa uma an√°lise ACAD√äMICA deste documento. Inclua:

1. **METODOLOGIA** (se aplic√°vel)
2. **ARGUMENTOS PRINCIPAIS** e sua fundamenta√ß√£o
3. **EVID√äNCIAS APRESENTADAS** e sua qualidade
4. **LIMITA√á√ïES** ou pontos fracos identificados
5. **CONTRIBUI√á√ïES** para o campo de conhecimento
6. **BIBLIOGRAFIA/REFER√äNCIAS** mencionadas
7. **RECOMENDA√á√ïES ACAD√äMICAS** para pesquisas futuras

Use linguagem acad√™mica apropriada.`

    case 'business':
      return baseInfo + `
Fa√ßa uma an√°lise EMPRESARIAL/ESTRAT√âGICA deste documento. Foque em:

1. **IMPACTO NO NEG√ìCIO** 
2. **OPORTUNIDADES** identificadas
3. **RISCOS** e desafios
4. **RECOMENDA√á√ïES ESTRAT√âGICAS**
5. **M√âTRICAS** e KPIs relevantes
6. **IMPLEMENTA√á√ÉO** - pr√≥ximos passos pr√°ticos
7. **ROI/BENEF√çCIOS** esperados

Seja pragm√°tico e orientado a resultados.`

    case 'educational':
      return baseInfo + `
Fa√ßa uma an√°lise EDUCACIONAL deste documento. Inclua:

1. **OBJETIVOS DE APRENDIZAGEM** identificados
2. **CONCEITOS-CHAVE** que devem ser compreendidos
3. **N√çVEL DE DIFICULDADE** e pr√©-requisitos
4. **METODOLOGIA PEDAG√ìGICA** sugerida
5. **ATIVIDADES** ou exerc√≠cios recomendados
6. **AVALIA√á√ÉO** - como testar o aprendizado
7. **RECURSOS COMPLEMENTARES** sugeridos

Foque no valor educacional e na aplica√ß√£o pr√°tica do conhecimento.`

    case 'exam_correction':
      return `
# SISTEMA DE CORRE√á√ÉO AUTOM√ÅTICA DE PROVAS - AN√ÅLISE ESPECIALIZADA

## CONTEXTO T√âCNICO:
**Documento analisado**: PDF com texto extra√≠do
**Tipo de estrutura detectada**: ${metadata.textStructure?.type || 'N√£o detectado'}
**Confian√ßa na detec√ß√£o**: ${metadata.textStructure?.confidence || 0}%
**Tem gabarito visual**: ${metadata.textStructure?.hasVisualGabarito || false}

## INSTRU√á√ïES ESPEC√çFICAS PARA GABARITOS VISUAIS:

### üéØ FORMATO DO GABARITO ESPERADO:
\`\`\`
NOME: GABARITO DATA: 29/08/2025
1
 A
 B
 C
 D
 E
2
 A
 B
 C
 D
 E
[... continua at√© quest√£o 25]
\`\`\`

### üìã REGRAS DE INTERPRETA√á√ÉO:
1. **IDENTIFICA√á√ÉO DO GABARITO**:
   - Primeira se√ß√£o com "NOME: GABARITO" ou "GABARITO DATA:"
   - Cada quest√£o numerada (1, 2, 3, ..., 25)
   - Sequ√™ncia de alternativas A, B, C, D, E abaixo de cada n√∫mero

2. **INTERPRETA√á√ÉO VISUAL** (baseada no texto extra√≠do):
   - Quando o PDF √© processado, as marca√ß√µes visuais podem aparecer como:
     * Sequ√™ncias "A B C D E" onde UMA alternativa pode estar destacada
     * Padr√µes de espa√ßamento diferentes
     * Caracteres especiais ou s√≠mbolos pr√≥ximos √† resposta correta
     * Linhas com apenas uma letra isolada (indicando resposta marcada)

3. **PROCESSO DE AN√ÅLISE**:
   - Identifique a se√ß√£o do gabarito (com "NOME: GABARITO")
   - Para cada quest√£o (1-25), determine qual alternativa est√° marcada
   - Se n√£o conseguir determinar visualmente, indique "N√£o identificado"

### üìä RELAT√ìRIO OBRIGAT√ìRIO:

**Metadados do documento:**
${JSON.stringify(metadata, null, 2)}

**TEXTO EXTRA√çDO PARA AN√ÅLISE:**
${text}

**ESTRUTURA DO RELAT√ìRIO:**

# üéØ AN√ÅLISE DE GABARITO VISUAL

## üìã 1. IDENTIFICA√á√ÉO DO GABARITO
**Status da detec√ß√£o**: [‚úÖ Encontrado / ‚ùå N√£o encontrado]
**Localiza√ß√£o**: [Primeira p√°gina / Outra localiza√ß√£o]
**Formato identificado**: [Visual com quadrados / Texto simples / Outro]

## ÔøΩ 2. GABARITO EXTRA√çDO
| Quest√£o | Resposta | Confian√ßa | Observa√ß√µes |
|---------|----------|-----------|-------------|
| 1       | [A/B/C/D/E] | [Alta/M√©dia/Baixa] | [Padr√£o identificado] |
| 2       | [A/B/C/D/E] | [Alta/M√©dia/Baixa] | [Padr√£o identificado] |
[... para todas as 25 quest√µes]

## ÔøΩ 3. AN√ÅLISE DE QUALIDADE
- **Total de quest√µes identificadas**: [n√∫mero]/25
- **Respostas com alta confian√ßa**: [n√∫mero]
- **Respostas com baixa confian√ßa**: [n√∫mero]
- **Quest√µes n√£o identificadas**: [lista]

## üîç 4. PADR√ïES VISUAIS DETECTADOS
- **Tipo de marca√ß√£o identificado**: [Descri√ß√£o]
- **Consist√™ncia do formato**: [Alta/M√©dia/Baixa]
- **Poss√≠veis problemas**: [Lista de inconsist√™ncias]

## ‚ö†Ô∏è 5. LIMITA√á√ïES E OBSERVA√á√ïES
- **Qualidade da extra√ß√£o de texto**: [Boa/Regular/Ruim]
- **Elementos visuais perdidos**: [Descri√ß√£o]
- **Recomenda√ß√µes de melhoria**: [Sugest√µes]

## üéØ 6. RESUMO EXECUTIVO
- **Gabarito utiliz√°vel**: [‚úÖ Sim / ‚ùå N√£o]
- **Confiabilidade geral**: [Alta/M√©dia/Baixa]
- **Pr√≥ximos passos recomendados**: [Orienta√ß√µes]

---

**IMPORTANTE**: 
- Use APENAS informa√ß√µes que conseguir identificar no texto extra√≠do
- Se algo n√£o estiver claro, indique "N√£o foi poss√≠vel identificar"
- Seja espec√≠fico sobre os padr√µes visuais que conseguiu detectar
- Foque na extra√ß√£o precisa do gabarito para corre√ß√£o posterior

Proceda com a an√°lise do documento fornecido:`

    default:
      return baseInfo + `
Fa√ßa uma an√°lise geral deste documento, destacando:
- Pontos principais
- Estrutura e organiza√ß√£o
- Qualidade do conte√∫do
- Recomenda√ß√µes
- Insights importantes`
  }
}

/**
 * Retorna o prompt do sistema baseado no tipo de an√°lise
 * @param {string} analysisType - Tipo de an√°lise
 * @returns {string} Prompt do sistema
 */
function getSystemPrompt(analysisType) {
  const basePrompt = `Voc√™ √© um analista especializado em documentos, com vasta experi√™ncia em an√°lise de conte√∫do. Voc√™ deve fornecer an√°lises detalhadas, objetivas e insights valiosos.`

  switch (analysisType) {
    case 'comprehensive':
      return basePrompt + ` Sua especialidade √© an√°lise completa e multidimensional de documentos, oferecendo uma vis√£o 360¬∞ do conte√∫do.`
    
    case 'academic':
      return basePrompt + ` Voc√™ √© um pesquisador acad√™mico com doutorado, especializado em an√°lise cr√≠tica de textos cient√≠ficos e acad√™micos.`
    
    case 'business':
      return basePrompt + ` Voc√™ √© um consultor empresarial s√™nior, especializado em an√°lise estrat√©gica e identifica√ß√£o de oportunidades de neg√≥cio.`
    
    case 'educational':
      return basePrompt + ` Voc√™ √© um pedagogo experiente, especializado em design instrucional e desenvolvimento de materiais educacionais.`
    
    case 'exam_correction':
      return basePrompt + ` Voc√™ √© um professor especialista em corre√ß√£o de provas e avalia√ß√µes. Voc√™ analisa visualmente provas de m√∫ltipla escolha onde a primeira p√°gina sempre cont√©m o GABARITO oficial identificado pelo campo "nome: GABARITO" (e possivelmente "data:") no cabe√ßalho. Voc√™ deve identificar padr√µes visuais de marca√ß√£o (quadrados preenchidos completamente em preto) para determinar as respostas de cada aluno e compar√°-las com o gabarito.`
    
    default:
      return basePrompt + ` Forne√ßa an√°lises claras, estruturadas e acion√°veis.`
  }
}

/**
 * Analisa um documento em chunks para textos muito longos
 * @param {Array<string>} textChunks - Chunks de texto
 * @param {Object} metadata - Metadados do documento
 * @param {string} analysisType - Tipo de an√°lise
 * @returns {Promise<Object>} An√°lise consolidada
 */
export async function analyzeDocumentInChunks(textChunks, metadata, analysisType = 'comprehensive') {
  try {
    console.log(`Analisando documento em ${textChunks.length} chunks...`)
    
    const chunkAnalyses = []
    
    // Analisa cada chunk individualmente
    for (let i = 0; i < textChunks.length; i++) {
      console.log(`Analisando chunk ${i + 1}/${textChunks.length}...`)
      
      const chunkAnalysis = await analyzeDocument(
        textChunks[i], 
        { ...metadata, chunkNumber: i + 1, totalChunks: textChunks.length }, 
        'summary' // Usa resumo para chunks individuais
      )
      
      chunkAnalyses.push(chunkAnalysis.analysis)
      
      // Pequeno delay para n√£o sobrecarregar a API
      if (i < textChunks.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    }
    
    // Consolida as an√°lises dos chunks
    const consolidatedText = chunkAnalyses.join('\n\n---\n\n')
    
    console.log('Consolidando an√°lises dos chunks...')
    
    const finalAnalysis = await analyzeDocument(
      consolidatedText,
      { ...metadata, isConsolidated: true },
      analysisType
    )
    
    return {
      ...finalAnalysis,
      chunksAnalyzed: textChunks.length,
      chunkAnalyses: chunkAnalyses
    }
    
  } catch (error) {
    console.error('Erro na an√°lise por chunks:', error)
    throw error
  }
}
